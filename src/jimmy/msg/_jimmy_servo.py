"""autogenerated by genpy from jimmy/jimmy_servo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class jimmy_servo(genpy.Message):
  _md5sum = "4ea57b764f702b7be0b6106982510281"
  _type = "jimmy/jimmy_servo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 ID_R_SHOULDER_PITCH      = 16
int32 ID_L_SHOULDER_PITCH      = 12
int32 ID_R_SHOULDER_ROLL       = 17
int32 ID_L_SHOULDER_ROLL       = 13
int32 ID_R_ELBOW               = 19
int32 ID_L_ELBOW               = 15
int32 ID_R_HIP_YAW             = 6
int32 ID_L_HIP_YAW             = 0
int32 ID_R_HIP_ROLL            = 8
int32 ID_L_HIP_ROLL            = 2
int32 ID_R_HIP_PITCH           = 7
int32 ID_L_HIP_PITCH           = 1
int32 ID_R_KNEE                = 9
int32 ID_L_KNEE                = 3
int32 ID_R_ANKLE_PITCH         = 10
int32 ID_L_ANKLE_PITCH         = 4
int32 ID_R_ANKLE_ROLL          = 11
int32 ID_L_ANKLE_ROLL          = 5
int32 ID_HEAD_PAN              = 20
int32 ID_HEAD_TILT             = 21
int32 ID_R_ELBOW_YAW           = 18
int32 ID_L_ELBOW_YAW           = 14
int32 ID_R_WRIST_YAW           = 23
int32 ID_L_WRIST_YAW           = 24
int32 ID_R_GRIPPER             = 25
int32 ID_L_GRIPPER             = 26
int32 ID_HEAD_TILT_2           = 22

string R_SHOULDER_PITCH      = RightShoulderPitch
string L_SHOULDER_PITCH      = LeftShoulderPitch
string R_SHOULDER_ROLL       = RightShoulderRoll
string L_SHOULDER_ROLL       = LeftShoulderRoll
string R_ELBOW               = RightElbow
string L_ELBOW               = LeftElbow
string R_HIP_YAW             = RightHipYaw
string L_HIP_YAW             = LeftHipYaw
string R_HIP_ROLL            = RightHipRoll
string L_HIP_ROLL            = LeftHipRoll
string R_HIP_PITCH           = RightHipPitch
string L_HIP_PITCH           = LeftHipPitch
string R_KNEE                = RightKnee
string L_KNEE                = LeftKnee
string R_ANKLE_PITCH         = RightAnklePitch
string L_ANKLE_PITCH         = LeftAnklePitch
string R_ANKLE_ROLL          = RightAnkleRoll
string L_ANKLE_ROLL          = LeftAnkleRoll
string HEAD_PAN              = HeadPan
string HEAD_TILT             = HeadTilt
string R_ELBOW_YAW           = RightElbowYaw
string L_ELBOW_YAW           = LeftElbowYaw
string R_WRIST_YAW           = RightWristYaw
string L_WRIST_YAW           = LeftWristYaw
string R_GRIPPER             = RightGripper
string L_GRIPPER             = LeftGripper
string HEAD_TILT_2           = HeadTilt2

string[] servo_names
int32[] servo_numbers
float64[] positions
"""
  # Pseudo-constants
  ID_R_SHOULDER_PITCH = 16
  ID_L_SHOULDER_PITCH = 12
  ID_R_SHOULDER_ROLL = 17
  ID_L_SHOULDER_ROLL = 13
  ID_R_ELBOW = 19
  ID_L_ELBOW = 15
  ID_R_HIP_YAW = 6
  ID_L_HIP_YAW = 0
  ID_R_HIP_ROLL = 8
  ID_L_HIP_ROLL = 2
  ID_R_HIP_PITCH = 7
  ID_L_HIP_PITCH = 1
  ID_R_KNEE = 9
  ID_L_KNEE = 3
  ID_R_ANKLE_PITCH = 10
  ID_L_ANKLE_PITCH = 4
  ID_R_ANKLE_ROLL = 11
  ID_L_ANKLE_ROLL = 5
  ID_HEAD_PAN = 20
  ID_HEAD_TILT = 21
  ID_R_ELBOW_YAW = 18
  ID_L_ELBOW_YAW = 14
  ID_R_WRIST_YAW = 23
  ID_L_WRIST_YAW = 24
  ID_R_GRIPPER = 25
  ID_L_GRIPPER = 26
  ID_HEAD_TILT_2 = 22
  R_SHOULDER_PITCH = 'RightShoulderPitch'
  L_SHOULDER_PITCH = 'LeftShoulderPitch'
  R_SHOULDER_ROLL = 'RightShoulderRoll'
  L_SHOULDER_ROLL = 'LeftShoulderRoll'
  R_ELBOW = 'RightElbow'
  L_ELBOW = 'LeftElbow'
  R_HIP_YAW = 'RightHipYaw'
  L_HIP_YAW = 'LeftHipYaw'
  R_HIP_ROLL = 'RightHipRoll'
  L_HIP_ROLL = 'LeftHipRoll'
  R_HIP_PITCH = 'RightHipPitch'
  L_HIP_PITCH = 'LeftHipPitch'
  R_KNEE = 'RightKnee'
  L_KNEE = 'LeftKnee'
  R_ANKLE_PITCH = 'RightAnklePitch'
  L_ANKLE_PITCH = 'LeftAnklePitch'
  R_ANKLE_ROLL = 'RightAnkleRoll'
  L_ANKLE_ROLL = 'LeftAnkleRoll'
  HEAD_PAN = 'HeadPan'
  HEAD_TILT = 'HeadTilt'
  R_ELBOW_YAW = 'RightElbowYaw'
  L_ELBOW_YAW = 'LeftElbowYaw'
  R_WRIST_YAW = 'RightWristYaw'
  L_WRIST_YAW = 'LeftWristYaw'
  R_GRIPPER = 'RightGripper'
  L_GRIPPER = 'LeftGripper'
  HEAD_TILT_2 = 'HeadTilt2'

  __slots__ = ['servo_names','servo_numbers','positions']
  _slot_types = ['string[]','int32[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servo_names,servo_numbers,positions

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(jimmy_servo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.servo_names is None:
        self.servo_names = []
      if self.servo_numbers is None:
        self.servo_numbers = []
      if self.positions is None:
        self.positions = []
    else:
      self.servo_names = []
      self.servo_numbers = []
      self.positions = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.servo_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.servo_numbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.servo_numbers))
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.positions))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.servo_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.servo_numbers = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.positions = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.servo_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.servo_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.servo_numbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.servo_numbers.tostring())
      length = len(self.positions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.positions.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.servo_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.servo_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.servo_numbers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
