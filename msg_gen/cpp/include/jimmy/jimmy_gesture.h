/* Auto-generated by genmsg_cpp for file /home/sophie/catkin_ws/src/jimmy/msg/jimmy_gesture.msg */
#ifndef JIMMY_MESSAGE_JIMMY_GESTURE_H
#define JIMMY_MESSAGE_JIMMY_GESTURE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace jimmy
{
template <class ContainerAllocator>
struct jimmy_gesture_ {
  typedef jimmy_gesture_<ContainerAllocator> Type;

  jimmy_gesture_()
  : cmd(0)
  , param()
  {
  }

  jimmy_gesture_(const ContainerAllocator& _alloc)
  : cmd(0)
  , param(_alloc)
  {
  }

  typedef int32_t _cmd_type;
  int32_t cmd;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _param_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  param;


  typedef boost::shared_ptr< ::jimmy::jimmy_gesture_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jimmy::jimmy_gesture_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct jimmy_gesture
typedef  ::jimmy::jimmy_gesture_<std::allocator<void> > jimmy_gesture;

typedef boost::shared_ptr< ::jimmy::jimmy_gesture> jimmy_gesturePtr;
typedef boost::shared_ptr< ::jimmy::jimmy_gesture const> jimmy_gestureConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::jimmy::jimmy_gesture_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::jimmy::jimmy_gesture_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace jimmy

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::jimmy::jimmy_gesture_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::jimmy::jimmy_gesture_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::jimmy::jimmy_gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a965d31aafc3ca30eff567cfc7155caf";
  }

  static const char* value(const  ::jimmy::jimmy_gesture_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa965d31aafc3ca30ULL;
  static const uint64_t static_value2 = 0xeff567cfc7155cafULL;
};

template<class ContainerAllocator>
struct DataType< ::jimmy::jimmy_gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "jimmy/jimmy_gesture";
  }

  static const char* value(const  ::jimmy::jimmy_gesture_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::jimmy::jimmy_gesture_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#basically a list of gestures as noted in config file\n\
\n\
int32 cmd\n\
float64[] param  \n\
\n\
";
  }

  static const char* value(const  ::jimmy::jimmy_gesture_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::jimmy::jimmy_gesture_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.cmd);
    stream.next(m.param);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct jimmy_gesture_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jimmy::jimmy_gesture_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::jimmy::jimmy_gesture_<ContainerAllocator> & v) 
  {
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "param[]" << std::endl;
    for (size_t i = 0; i < v.param.size(); ++i)
    {
      s << indent << "  param[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.param[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // JIMMY_MESSAGE_JIMMY_GESTURE_H

